import { AnyAssertFunc, TypeOf, Field } from "../types";
import { CastDelegate } from "./cast";
export declare function rename<FromFieldNameT extends string, ToFieldNameT extends string, AssertFuncT extends AnyAssertFunc>(fromKey: FromFieldNameT, toKey: ToFieldNameT, assert: AssertFuncT): (name: string, mixed: any) => { [field in ToFieldNameT]: AssertFuncT extends new () => infer T ? T : AssertFuncT extends (name: string, mixed: any) => infer T ? T : AssertFuncT extends Field<string, infer T> ? T : never; };
export declare function deriveFrom<FromFieldNameT extends string, ToFieldNameT extends string, FromF extends AnyAssertFunc, ToF extends AnyAssertFunc>(fromKey: FromFieldNameT, toKey: ToFieldNameT, canCast: FromF, castDelegate: CastDelegate<TypeOf<FromF>, TypeOf<ToF>>, assert: ToF): (name: string, mixed: any) => { [field in FromFieldNameT | ToFieldNameT]: field extends FromFieldNameT ? FromF extends new () => infer T ? T : FromF extends (name: string, mixed: any) => infer T ? T : FromF extends Field<string, infer T> ? T : never : field extends ToFieldNameT ? ToF extends new () => infer T ? T : ToF extends (name: string, mixed: any) => infer T ? T : ToF extends Field<string, infer T> ? T : never : never; };
